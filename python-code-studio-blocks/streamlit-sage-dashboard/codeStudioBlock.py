import dataiku
import os, json, re, logging

from dataiku.code_studio import CodeStudioBlock
from block_utils import LibLocationPathReplacer, generate_python_codenv
from distutils.version import LooseVersion


class MyCodeStudioBlock(CodeStudioBlock):
    def __init__(self, config, plugin_config):
        self.config = config
        self.plugin_config = plugin_config
        
    _ENTRYPOINT_FILE = "streamlit-entrypoint.sh"
    
    def _get_entrypoint_path(self):
        entrypoint_path = "/opt/dataiku"
        if entrypoint_path.endswith("/") or not entrypoint_path.endswith(".sh"):
            entrypoint_path = os.path.join(entrypoint_path, self._ENTRYPOINT_FILE)
        return entrypoint_path
    
    def _get_port(self):
        return self.config.get("port", 8181)
        
    def build_spec(self, spec, env, template):
        port = self._get_port()
        entrypoint_path = self._get_entrypoint_path()
        start_file = "__PROJECT_LIB_VERSIONED__/python/sage/app.py"
        settings_path = "__PROJECT_LIB_VERSIONED__/python/sage"
        enable_xsrf = False
        
        # replace the lib locations in settings_path and open_in_path
        replacer = LibLocationPathReplacer(spec)
        start_file = replacer.replace_variable_by_path(start_file)
        settings_path = replacer.replace_variable_by_path(settings_path)
        
        # Default Packages
        import dataiku
        client = dataiku.api_client()
        ce = client.get_code_env(env_name="plugin_sage_managed", env_lang="PYTHON")
        actual_packges = ce.get_settings().get_raw()["actualPackageList"].split("\n")
        default_packages = [s for s in actual_packges if s]
        default_packages = " ".join(default_packages)
        generate_codenv, pyenv_path = generate_python_codenv(
            "STREAMLIT", self.config, template,
            default_packages, "/opt/dataiku/python-code-envs/pyenv-streamlit", "python3.11", env.get("globalCodeEnvsExtraSettings")
        )
        
        # add the entrypoint script in the buildir
        entrypoint_script = """
#! /bin/bash

if [ ! -f {start_file} ]; then
    mkdir -p $(dirname {start_file})
fi

USER=dataiku
HOME=/home/dataiku

# CREATE THE STREAMLIT CONFIG.TOML

if [ $DKU_CODE_STUDIO_IS_PUBLIC_PORT_{port} = "1" ]; then
    export BIND_ADDR=0.0.0.0
else
    export BIND_ADDR=127.0.0.1
fi

mkdir -p /home/dataiku/.streamlit
export BASE_URL=$(eval echo "$DKU_CODE_STUDIO_BROWSER_PATH_{port}")

cat << 'EOF' | envsubst > /home/dataiku/.streamlit/config.toml
# Autogenerated by Dataiku for Code Studio - DO NOT EDIT
# If you need to change streamlit config, either do it from the Code Studio template , or use the "Settings folder" setting, 
# which store a per-app (persisted) config, by default in /home/dataiku/workspace/code_studio-versioned/streamlit/.streamlit/config.toml

[logger]
level = "info"

[server]
address = "$BIND_ADDR"
port = {port}
enableCORS = false
enableXsrfProtection = {enable_xsrf}
runOnSave = true
baseUrlPath = "$BASE_URL"

[browser]
gatherUsageStats = false
EOF

# CREATE THE STREAMLIT CREDENTIALS IF NEEDED

if [ ! -f /home/dataiku/.streamlit/credentials.toml ]; then
    cat << 'EOF' > /home/dataiku/.streamlit/credentials.toml
[general]
email = ""
EOF
fi

# CREATE THE USER_CUSTOMIZABLE CONFIG.TOML
if [ ! -f {settings_path}/.streamlit/config.toml ]; then
    mkdir -p {settings_path}/.streamlit
    cat << 'EOF' > {settings_path}/.streamlit/config.toml
[server]
maxUploadSize=200       # in MB, bump if users upload big files

[client]
toolbarMode="minimal"   # hide Streamlit dev toolbar (cleaner UI)

[runner]
magicEnabled=false      # disables "magic commands" â†’ better perf/logging clarity
fastReruns=true         # reuse cached state where possible between reruns

[global]
dataFrameSerialization="arrow"   # faster dataframe transport than legacy

[theme]
base="light"             # "light", "dark", or "auto"
primaryColor="#4CAF50"   # accent color (buttons, sliders, etc.)
backgroundColor="#FFFFFF"
secondaryBackgroundColor="#F5F5F5"
textColor="#000000"
font="sans serif"       # "sans serif", "serif", or "monospace"

[ui]
hideTopBar=false        # keep gear/settings menu visible
hideSidebarNav=false    # (if using multipage apps) keep sidebar navigation
EOF
fi

# START STREAMLIT

# cd'ing in order to pick the custom config
cd {settings_path}
LC_ALL=en_US.utf8 {pyenv_path}/bin/streamlit run {start_file}
""".format(pyenv_path=pyenv_path, start_file=start_file, settings_path=settings_path, port=port, enable_xsrf="true" if enable_xsrf else "false")
        with open(os.path.join(env["buildDir"], self._ENTRYPOINT_FILE), "wb") as f:
            f.write(entrypoint_script.encode("utf8"))

        # the dockerfile addition
        spec["dockerfile"] = spec.get("dockerfile", "") + """
##### STREAMLIT BLOCK #####

USER root
WORKDIR /opt/dataiku

RUN yum install -y gettext

{generate_codenv}

# entrypoint.sh
COPY {entrypoint_file} {entrypoint_path}
RUN chown dataiku:root {entrypoint_path} && chmod +x {entrypoint_path}

# USER dataiku
USER 500
WORKDIR /home/dataiku
""".format(pyenv_path=pyenv_path, start_file=start_file, port=port,
           entrypoint_path=entrypoint_path, entrypoint_file=self._ENTRYPOINT_FILE,
           generate_codenv=generate_codenv)
        return spec

    
    def build_launch(self, spec, env):
        if env['launchedFrom'] == 'WEBAPP' and not self.config.get("useInWebapps", False):
            return spec
        port = self._get_port()
        spec['entrypoints'] = spec.get('entrypoints', []) + [self._get_entrypoint_path()]
        if spec.get('readinessProbeUrl', "") == "":
            spec['readinessProbeUrl'] = "http://localhost:" + str(port) + "${baseUrlPort" + str(port) + "}/index.html"
        exposed_port = {
            "label": "Streamlit", 
            "proxiedUrlSuffix": "$uri$is_args$args",
            "exposeHtml": True, 
            "port": port
        }
        spec['exposedPorts'] = spec.get('exposedPorts', []) + [exposed_port]
        return spec

    
    def build_creation(self, spec, env):
        return spec
